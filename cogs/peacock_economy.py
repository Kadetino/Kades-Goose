import discord  # Discord API wrapper
from discord import app_commands  # Slash commands
from discord.app_commands import Choice  # Slash command choices
from discord.ext import commands  # Discord BOT
import sqlite3 as sl  # SQLite database
from random import randint  # Random number generation for economy
from config import prefix  # Global settings
from time import time  # Epoch timestamp
import datetime  # Shop - timeout

import cog_settings.peacock_economy_settings as loc
import cog_settings.peacock_economy_db_queries as dbq


class peacockEconomyCog(commands.GroupCog, name="economy"):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener('on_message')
    async def on_message_give_peacocks(self, user_message: discord.message.Message):
        # TODO rework and dms

        # Checks and connecting database
        if user_message.author.bot or user_message.content.startswith(prefix):
            return
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, user_message.guild.id, user_message.author.id)

        # Check if there is message cooldown
        database_entry = dbq.get_user_column_info(sql_connection, user_message.guild.id, user_message.author.id,
                                                  "message_cooldown")
        epoch_right_now = int(time())
        if epoch_right_now < database_entry + loc.peacock_gain_per_message_cooldown:
            return sql_connection.close()
        else:
            sql_connection.execute(
                f"UPDATE ECONOMY SET message_cooldown = {epoch_right_now} WHERE guild_id = ? AND user_id = ?",
                (user_message.guild.id, user_message.author.id))
            sql_connection.commit()

        # Amount of peacocks gained per message: bonus points for using specific emoji
        peacocks_gained = loc.peacocks_gained_per_message()
        peacock_emote = "ü¶ö"
        if peacock_emote in str(user_message.content):
            # Maybe needs balancing
            message_peacocks = str(user_message.content).count(peacock_emote)
            emote_multiplier = 2 if message_peacocks >= 3 else message_peacocks
            peacocks_gained += 3 * emote_multiplier

        # Update database entry
        sql_connection.execute(
            f"UPDATE ECONOMY SET cookie_counter = cookie_counter + {peacocks_gained} WHERE guild_id = ? AND user_id = ?",
            (user_message.guild.id, user_message.author.id))

        # Commit and close
        sql_connection.commit()
        return sql_connection.close()

    @app_commands.command(name="profile", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
    @app_commands.describe(member="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å.")
    async def display_user_profile(self, ctx: discord.Interaction, member: discord.Member = None):
        # TODO display different profiles
        # TODO Rework
        # Check if user argument was provided
        if member is None:
            member = ctx.user

        # Database connection
        sql_connection = sl.connect('Peacock.db')

        # Profile retrieval
        data = sql_connection.execute(
            f"SELECT cookie_counter, cookie_jar_storage, cookie_jar_storage_level, upgrade1, upgrade2, upgrade3, upgrade4, upgrade5, upgrade6, upgrade7 FROM ECONOMY WHERE guild_id = {ctx.guild.id} AND user_id = {member.id}").fetchone()
        cooldown_data = sql_connection.execute(
            f"SELECT last_access, last_theft_attempt, daily_bonus, weekly_bonus, monthly_bonus FROM ECONOMY WHERE guild_id = {ctx.guild.id} AND user_id = {member.id}").fetchone()
        # infamy_lvl = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "infamy_lvl")
        fame_lvl = dbq.get_user_column_info(sql_connection, ctx.guild.id, member.id, "fame_lvl")
        lockpicks = dbq.get_user_column_info(sql_connection, ctx.guild.id, member.id, "lockpicks")
        sql_connection.close()

        # Nothing found
        if data is None:
            return await ctx.response.send_message(f"<@{member.id}> –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è.", ephemeral=True)
        else:
            member_cookies = f"ü¶ö {data[0]}"
            bank_info = f"ü¶ö {data[1]} –∏–∑ {data[2] * dbq.bank_capacity_per_lvl(ctx)}"
            upgrade_info = f"`{loc.upgrade_name_dict['upgrade1']}`: {data[3]} —É—Ä–æ–≤–µ–Ω—å\n" \
                           f"`{loc.upgrade_name_dict['upgrade2']}`: {data[4]} —É—Ä–æ–≤–µ–Ω—å\n" \
                           f"`{loc.upgrade_name_dict['upgrade3']}`: {data[5]} —É—Ä–æ–≤–µ–Ω—å\n" \
                           f"`{loc.upgrade_name_dict['upgrade4']}`: {data[6]} —É—Ä–æ–≤–µ–Ω—å\n" \
                           f"`{loc.upgrade_name_dict['upgrade5']}`: {data[7]} —É—Ä–æ–≤–µ–Ω—å\n" \
                           f"`{loc.upgrade_name_dict['upgrade6']}`: {data[8]} —É—Ä–æ–≤–µ–Ω—å\n" \
                           f"`{loc.upgrade_name_dict['upgrade7']}`: {data[9]} —É—Ä–æ–≤–µ–Ω—å\n"
            total_info = f"~ ü¶ö {data[0] + data[1]}"
            cooldown_info = ""
            # Work timer
            if cooldown_data[0] + loc.work_bonus_cooldown < int(time()):
                cooldown_info += ", `/work`"
            # Daily bonus timer
            if cooldown_data[2] + loc.daily_bonus_cooldown < int(time()):
                cooldown_info += ", `/daily`"
            # Weekly bonus timer
            if cooldown_data[3] + loc.weekly_bonus_cooldown < int(time()):
                cooldown_info += ", `/weekly`"
            # Monthly bonus timer
            if cooldown_data[4] + loc.monthly_bonus_cooldown < int(time()):
                cooldown_info += ", `/monthly`"
            # Theft timer
            if cooldown_data[1] + loc.theft_cooldown < int(time()):
                cooldown_info += ", `/steal`"

        # Reply embed
        reply_embed = discord.Embed(title=f"–ü—Ä–æ—Ñ–∏–ª—å {member.name}",
                                    colour=discord.Colour.gold())
        reply_embed.timestamp = loc.moscow_timezone()
        reply_embed.set_thumbnail(url=member.avatar)
        reply_embed.set_footer(text=f"{ctx.guild.name}",
                               icon_url=ctx.guild.icon)
        reply_embed.add_field(name=f"–ö–æ—à–µ–ª—ë–∫:", value=member_cookies, inline=False)
        reply_embed.add_field(name=f"–ë–∞–Ω–∫:", value=bank_info, inline=False)
        reply_embed.add_field(name=f"–£–ª—É—á—à–µ–Ω–∏—è:", value=upgrade_info, inline=False)
        reply_embed.add_field(name=f"–ü—Ä–æ—á–µ–µ:", value=f'–û—Ç–º—ã—á–∫–∏: {lockpicks} —à—Ç—É–∫\n'
                                                     f'–£—Ä–æ–≤–µ–Ω—å –ë–∏–∑–Ω–µ—Å–º–µ–Ω: {fame_lvl}', inline=False)
        reply_embed.add_field(name=f"–ö–æ—à–µ–ª—ë–∫+–ë–∞–Ω–∫:", value=total_info, inline=False)
        # Make cooldown_info fancy and add field
        if cooldown_info != "":
            cooldown_info = f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã: {cooldown_info[2::]}."
            reply_embed.add_field(name=f"–ù–∞–≥—Ä–∞–¥—ã:", value=cooldown_info, inline=False)

        return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="daily", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å.")
    async def daily_bonus(self, ctx: discord.Interaction):
        # –°onnecting database
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, ctx.user.id)

        # Check if there is message cooldown
        last_cd_epoch = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "daily_bonus")
        epoch_right_now = int(time())
        if epoch_right_now < last_cd_epoch + loc.daily_bonus_cooldown:
            # Close connection
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ë–æ–Ω—É—Å –¥–Ω—è",
                                        description=f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å. "
                                                    f"–í–µ—Ä–Ω–∏—Ç–µ—Å—å <t:{last_cd_epoch + loc.daily_bonus_cooldown}:R>",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_thumbnail(url=ctx.user.avatar)
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)
        else:
            # Update database
            dbq.claim_peacock_bonus(sql_connection, ctx.guild.id, ctx.user.id, "daily_bonus", loc.daily_bonus_,
                                    epoch_right_now)
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"üí∞ –ë–æ–Ω—É—Å –¥–Ω—è",
                                        description=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –≤ ü¶ö {loc.daily_bonus_}.",
                                        colour=discord.Colour.gold())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_thumbnail(url=ctx.user.avatar)
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="weekly", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å.")
    async def weekly_bonus(self, ctx: discord.Interaction):
        # Connecting database
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, ctx.user.id)

        # Check if there is message cooldown
        last_cd_epoch = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "weekly_bonus")
        epoch_right_now = int(time())
        if epoch_right_now < last_cd_epoch + loc.weekly_bonus_cooldown:
            # Close connection
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ë–æ–Ω—É—Å –Ω–µ–¥–µ–ª–∏",
                                        description=f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å. "
                                                    f"–í–µ—Ä–Ω–∏—Ç–µ—Å—å <t:{last_cd_epoch + loc.weekly_bonus_cooldown}:R>",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_thumbnail(url=ctx.user.avatar)
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)
        else:
            # Update database
            dbq.claim_peacock_bonus(sql_connection, ctx.guild.id, ctx.user.id, "weekly_bonus", loc.weekly_bonus_,
                                    epoch_right_now)
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"üí∞ –ë–æ–Ω—É—Å –Ω–µ–¥–µ–ª–∏",
                                        description=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –≤ ü¶ö {loc.weekly_bonus_}.",
                                        colour=discord.Colour.gold())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_thumbnail(url=ctx.user.avatar)
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="monthly", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å.")
    async def monthly_bonus(self, ctx: discord.Interaction):
        # Connecting database
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, ctx.user.id)

        # Check if there is message cooldown
        last_cd_epoch = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "monthly_bonus")
        epoch_right_now = int(time())
        if epoch_right_now < last_cd_epoch + loc.monthly_bonus_cooldown:
            # Close connection
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ë–æ–Ω—É—Å –º–µ—Å—è—Ü–∞",
                                        description=f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å. "
                                                    f"–í–µ—Ä–Ω–∏—Ç–µ—Å—å <t:{last_cd_epoch + loc.monthly_bonus_cooldown}:R>",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_thumbnail(url=ctx.user.avatar)
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)
        else:
            # Update database
            dbq.claim_peacock_bonus(sql_connection, ctx.guild.id, ctx.user.id, "monthly_bonus", loc.monthly_bonus_,
                                    epoch_right_now)
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"üí∞ –ë–æ–Ω—É—Å –º–µ—Å—è—Ü–∞",
                                        description=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–º–µ—Å—è—á–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –≤ ü¶ö {loc.monthly_bonus_}.",
                                        colour=discord.Colour.gold())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_thumbnail(url=ctx.user.avatar)
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="leaderboard", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤. Work in progress.")
    async def economyboard(self, ctx: discord.Interaction):
        # TODO Rework
        # Connect to database
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, ctx.user.id)

        # Get data and close
        data = sql_connection.execute(
            f"select user_id, cookie_counter, cookie_jar_storage, last_access, daily_bonus, weekly_bonus, monthly_bonus, last_theft_attempt from ECONOMY where guild_id = {ctx.guild.id}").fetchall()
        sql_connection.commit()
        sql_connection.close()

        # Check if data is empty
        if len(data) == 0:
            return await ctx.response.send_message("Nothing to show.", ephemeral=True)

        # Calculate total amount of peacocks
        storage = []  # place to store tuples
        author_entry = "Error"

        # Go through data
        for line in data:
            total_peacocks = line[1] + line[2]
            # Get user by his id
            user = self.bot.get_user(line[0])
            # If getting user failed
            if user is None:
                continue
            # Adding value to storage
            storage.append((f"{user}", total_peacocks, line[1], line[2]))

        # Sort storage for leaderboard
        storage.sort(key=lambda y: y[1], reverse=True)

        # Author stats
        for i in range(len(storage)):
            if storage[i][0] == str(ctx.user):
                author_entry = f"–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: `#{i + 1}` {ctx.user}: ü¶ö {storage[i][1]}"
                break

        # Discord embed
        embed = discord.Embed(title=f"{ctx.guild.name} leaderboard",
                              description=author_entry,
                              colour=discord.Colour.gold())
        for i in range(len(storage)):
            # Check if more than 10 entries already
            if i == 10:
                break

            # Start adding fields
            if i == 0:
                embed.add_field(name=f":first_place: {storage[i][0]}",
                                value=f"–í—Å–µ–≥–æ: ü¶ö {storage[i][1]}\n"
                                      f"–ö–æ—à–µ–ª—ë–∫: ü¶ö {storage[i][2]}\n"
                                      f"–ë–∞–Ω–∫: ü¶ö {storage[i][3]}",
                                inline=False)
            elif i == 1:
                embed.add_field(name=f":second_place: {storage[i][0]}",
                                value=f"–í—Å–µ–≥–æ: ü¶ö {storage[i][1]}\n"
                                      f"–ö–æ—à–µ–ª—ë–∫: ü¶ö {storage[i][2]}\n"
                                      f"–ë–∞–Ω–∫: ü¶ö {storage[i][3]}",
                                inline=False)
            elif i == 2:
                embed.add_field(name=f":third_place: {storage[i][0]}",
                                value=f"–í—Å–µ–≥–æ: ü¶ö {storage[i][1]}\n"
                                      f"–ö–æ—à–µ–ª—ë–∫: ü¶ö {storage[i][2]}\n"
                                      f"–ë–∞–Ω–∫: ü¶ö {storage[i][3]}",
                                inline=False)
            else:
                embed.add_field(name=f"`#{i + 1}` {storage[i][0]}",
                                value=f"–í—Å–µ–≥–æ: ü¶ö {storage[i][1]}\n"
                                      f"–ö–æ—à–µ–ª—ë–∫: ü¶ö {storage[i][2]}\n"
                                      f"–ë–∞–Ω–∫: ü¶ö {storage[i][3]}",
                                inline=False)

        # Embed: Icon and description on how it works
        embed.set_thumbnail(url=ctx.guild.icon)
        embed.add_field(name=f"‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
                        value=f"–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ü¶ö –ø–∞–≤–ª–∏–Ω–æ–≤ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã.",
                        inline=False)
        embed.timestamp = loc.moscow_timezone()
        embed.set_footer(text=f"{ctx.user}",
                         icon_url=ctx.user.avatar)

        return await ctx.response.send_message(embed=embed, ephemeral=False)

    @app_commands.command(name="give", description="–ü–µ—Ä–µ–¥–∞—Ç—å ü¶ö –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ö–æ–º–∏—Å—Å–∏—è 5% –∑–∞ –ø–µ—Ä–µ–≤–æ–¥.")
    @app_commands.describe(member="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç –æ—Ç –≤–∞—Å ü¶ö.",
                           amount="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ü¶ö, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–µ—Ä–µ–≤–µ–¥—ë—Ç–µ.")
    async def transfer_peacocks(self, ctx: discord.Interaction, member: discord.Member, amount: int):
        # TODO Rework?
        # Checks if target is valid member
        if member.bot:  # Target is a bot
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                                        description=f"–ë–æ—Ç—ã –Ω–µ –ª—é–¥–∏.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        elif ctx.user.id == member.id:  # Target is yourself
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                                        description=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        # Connection to database and retrieving authors peacocks
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, ctx.user.id)
        author_cookies = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "cookie_counter")

        # Check if author has sufficien amount of peacocks
        if author_cookies < round(amount * 1.05) + 1:  # He doesn't have enough
            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                                        description=f"<@{ctx.user.id}>, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü¶ö "
                                                    f"–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.\n"
                                                    f"–í—ã –∏–º–µ–µ—Ç–µ ü¶ö {author_cookies} –≤ –∫–æ—à–µ–ª—å–∫–µ.\n"
                                                    f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ "
                                                    f"–∏ –∑–∞–ø–ª–∞—Ç–∏—Ç—å 5% –æ—Ç –Ω–µ—ë –∫–∞–∫ –∫–æ–º–∏—Å—Å–∏—é.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            # Close connection and reply
            sql_connection.close()

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)
        else:  # Author has enough
            # Reply embed
            reply_embed = discord.Embed(title=f"üí∞ –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥",
                                        description=f"<@{member.id}> –ø–æ–ª—É—á–∏–ª ü¶ö {amount} –æ—Ç <@{ctx.user.id}>.\n\n"
                                                    f"–ö–æ–º–∏—Å—Å–∏—è –±—ã–ª–∞ 5% ü¶ö.",
                                        colour=discord.Colour.green())
            reply_embed.set_thumbnail(url=member.avatar)
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, member.id)

            # Update database
            sql_connection.execute(
                f"UPDATE ECONOMY SET cookie_counter = cookie_counter - {amount} WHERE guild_id = ? AND user_id = ?",
                (ctx.guild.id, ctx.user.id))
            if round(amount * 0.05) == 0:
                sql_connection.execute(
                    f"UPDATE ECONOMY SET cookie_counter = cookie_counter - 1 WHERE guild_id = ? AND user_id = ?",
                    (ctx.guild.id, ctx.user.id))
            else:
                sql_connection.execute(
                    f"UPDATE ECONOMY SET cookie_counter = cookie_counter - {round(amount * 0.05)} WHERE guild_id = ? AND user_id = ?",
                    (ctx.guild.id, ctx.user.id))
            sql_connection.execute(
                f"UPDATE ECONOMY SET cookie_counter = cookie_counter + {amount} WHERE guild_id = ? AND user_id = ?",
                (ctx.guild.id, member.id))
            sql_connection.commit()
            sql_connection.close()

            return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="buy_upgrade", description="–ö—É–ø–∏—Ç—å –æ–¥–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ –∑–∞ ü¶ö.")
    @app_commands.describe(upgrade="–£–ª—É—á—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∫—É–ø–∏—Ç–µ –∑–∞ ü¶ö")
    @app_commands.choices(upgrade=[
        Choice(name='–°–ø–∏—Å–æ–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π', value="help"),
        Choice(name='–ë–∞–Ω–∫', value="cookie_jar_storage_level"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 1 - {loc.upgrade_name_dict["upgrade1"]}', value="upgrade1"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 2 - {loc.upgrade_name_dict["upgrade2"]}', value="upgrade2"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 3 - {loc.upgrade_name_dict["upgrade3"]}', value="upgrade3"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 4 - {loc.upgrade_name_dict["upgrade4"]}', value="upgrade4"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 5 - {loc.upgrade_name_dict["upgrade5"]}', value="upgrade5"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 6 - {loc.upgrade_name_dict["upgrade6"]}', value="upgrade6"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 7 - {loc.upgrade_name_dict["upgrade7"]}', value="upgrade7"),
    ])
    async def buy_upgrade(self, ctx: discord.Interaction, upgrade: str):
        # Database connection
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, ctx.user.id)

        # Upgrade - Help
        if upgrade == "help":
            # Info retrieval
            upg_lvl_data = sql_connection.execute(
                f"SELECT cookie_jar_storage_level, upgrade1, upgrade2, upgrade3, upgrade4, upgrade5, upgrade6, upgrade7 FROM ECONOMY WHERE guild_id = {ctx.guild.id} AND user_id = {ctx.user.id}").fetchone()
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è {ctx.user}",
                                        colour=discord.Colour.yellow())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_thumbnail(url=ctx.user.avatar)
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            reply_embed.add_field(name=f"–¶–µ–Ω–∞ –±–∞–Ω–∫–∞ `{upg_lvl_data[0] + 1}` —É—Ä–æ–≤–Ω—è:",
                                  value=f"ü¶ö {loc.upgrade_prices_functions_dict['cookie_jar_storage_level']((upg_lvl_data[0] + 1))}",
                                  inline=False)
            for i in range(1, len(upg_lvl_data)):
                if 1 == 1:
                    upgrade = f'upgrade{i}'
                    reply_embed.add_field(
                        name=f"–¶–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è {i} - `{loc.upgrade_name_dict[upgrade]}` `{upg_lvl_data[i] + 1}` —É—Ä–æ–≤–Ω—è:",
                        value=f"ü¶ö {loc.upgrade_prices_functions_dict[upgrade](upg_lvl_data[i] + 1)}",
                        inline=False)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        # Info retrieval
        author_cookies = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "cookie_counter")
        upgrade_level = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, upgrade)
        upgrade_name = loc.upgrade_name_dict[upgrade]

        # Calculate price
        upgrade_level_price = loc.upgrade_prices_functions_dict[upgrade](upgrade_level + 1)

        # Check if enough funds
        if author_cookies < upgrade_level_price:  # Not enough funds
            # Close
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                                        description=f"<@{ctx.user.id}>, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π "
                                                    f"—É—Ä–æ–≤–µ–Ω—å —ç—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è.\n"
                                                    f"–í–∞—à –∫–æ—à–µ–ª—ë–∫: ü¶ö {author_cookies}\n"
                                                    f"–¶–µ–Ω–∞ —ç—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è `{upgrade_level + 1}`: ü¶ö {upgrade_level_price}.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        # Enough funds
        else:
            # Update database
            sql_connection.execute(
                f"UPDATE ECONOMY SET {upgrade} = {upgrade_level + 1} WHERE guild_id = ? AND user_id = ?",
                (ctx.guild.id, ctx.user.id))
            sql_connection.execute(
                f"UPDATE ECONOMY SET cookie_counter = cookie_counter - {upgrade_level_price} WHERE guild_id = ? AND user_id = ?",
                (ctx.guild.id, ctx.user.id))

            # Close
            sql_connection.commit()
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞",
                                        description=f"<@{ctx.user.id}> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç `{upgrade_name} "
                                                    f"{upgrade_level + 1}` –∑–∞ ü¶ö {upgrade_level_price}.",
                                        colour=discord.Colour.green())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="sell_upgrade",
                          description="–ü—Ä–æ–¥–∞—Ç—å –æ–¥–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ –∑–∞ ü¶ö. –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ - 80% –æ—Ç —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏.")
    @app_commands.describe(upgrade="–£–ª—É—á—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–æ–¥–∞–¥–∏—Ç–µ –∑–∞ ü¶ö",
                           quantity="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π")
    @app_commands.choices(upgrade=[
        Choice(name=f'–°–ø–∏—Å–æ–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂–∏ —É–ª—É—á—à–µ–Ω–∏–π', value="help"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 1 - {loc.upgrade_name_dict["upgrade1"]}', value="upgrade1"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 2 - {loc.upgrade_name_dict["upgrade2"]}', value="upgrade2"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 3 - {loc.upgrade_name_dict["upgrade3"]}', value="upgrade3"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 4 - {loc.upgrade_name_dict["upgrade4"]}', value="upgrade4"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 5 - {loc.upgrade_name_dict["upgrade5"]}', value="upgrade5"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 6 - {loc.upgrade_name_dict["upgrade6"]}', value="upgrade6"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 7 - {loc.upgrade_name_dict["upgrade7"]}', value="upgrade7"),
    ])
    async def sell_upgrade(self, ctx: discord.Interaction, upgrade: str, quantity: int = 1):
        # Database connection and default value
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, ctx.user.id)

        # Upgrade - Help
        if upgrade == "help":
            # Info retrieval
            upg_lvl_data = sql_connection.execute(
                f"SELECT upgrade1, upgrade2, upgrade3, upgrade4, upgrade5, upgrade6, upgrade7 FROM ECONOMY WHERE guild_id = {ctx.guild.id} AND user_id = {ctx.user.id}").fetchone()
            sql_connection.close()

            # Reply embed
            any_fields_shown = False
            reply_embed = discord.Embed(title=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è {ctx.user}",
                                        colour=discord.Colour.yellow())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_thumbnail(url=ctx.user.avatar)
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            for i in range(len(upg_lvl_data)):
                if upg_lvl_data[i] != 0:
                    upgrade = f'upgrade{i + 1}'
                    reply_embed.add_field(
                        name=f"–¶–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è {i + 1} - `{loc.upgrade_name_dict[upgrade]}` `{upg_lvl_data[i]}` —É—Ä–æ–≤–Ω—è:",
                        value=f"ü¶ö {round(0.8 * loc.upgrade_prices_functions_dict[upgrade](upg_lvl_data[i]))}",
                        inline=False)
                    any_fields_shown = True

            if not any_fields_shown:
                reply_embed = discord.Embed(title=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è {ctx.user}",
                                            description="–í–∞–º –Ω–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å.",
                                            colour=discord.Colour.yellow())
                reply_embed.timestamp = loc.moscow_timezone()
                reply_embed.set_thumbnail(url=ctx.user.avatar)
                reply_embed.set_footer(text=f"{ctx.guild.name}",
                                       icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        upgrade_level = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, upgrade)
        upgrade_name = loc.upgrade_name_dict[upgrade]

        # Nothing to sell
        if upgrade_level == 0 or upgrade_level < quantity:
            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å",
                                        description=f"<@{ctx.user.id}>, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è, "
                                                    f"—Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –≤–ª–∞–¥–µ–µ—Ç–µ –∏–º.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        # Calculate price
        if quantity < 1:
            quantity = 1
        sell_price = 0
        for i in range(upgrade_level, upgrade_level-quantity, -1):
            sell_price += round(loc.upgrade_prices_functions_dict[upgrade](i) * 0.8)

        # Update database
        sql_connection.execute(
            f"UPDATE ECONOMY SET {upgrade} = {upgrade_level - quantity} WHERE guild_id = ? AND user_id = ?",
            (ctx.guild.id, ctx.user.id))
        sql_connection.execute(
            f"UPDATE ECONOMY SET cookie_counter = cookie_counter + {sell_price} WHERE guild_id = ? AND user_id = ?",
            (ctx.guild.id, ctx.user.id))

        # Close
        sql_connection.commit()
        sql_connection.close()

        # Reply embed
        reply_embed = discord.Embed(title=f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞",
                                    description=f"<@{ctx.user.id}> —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞—ë—Ç {quantity} `{upgrade_name}` "
                                                f"–∑–∞ ü¶ö {sell_price}.",
                                    colour=discord.Colour.green())
        reply_embed.timestamp = loc.moscow_timezone()
        reply_embed.set_footer(text=f"{ctx.guild.name}",
                               icon_url=ctx.guild.icon)

        return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="steal", description="–£–∫—Ä–∞—Å—Ç—å ü¶ö –∏–∑ –∫–æ—à–µ–ª—å–∫–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    @app_commands.describe(member="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫—Ä–∞—Å—Ç—å ü¶ö.",
                           lockpick="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–º—ã—á–∫—É –¥–ª—è –≤–∑–ª–æ–º–∞ –±–∞–Ω–∫–∞.")
    async def steal_peacocks(self, ctx: discord.Interaction, member: discord.Member, lockpick: bool = False):
        # Check if user is eligible
        if member.bot or ctx.user.id == member.id:
            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                                        description=f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        # Connection to database
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, member.id)

        # Check if there is theft cooldown
        last_theft_epoch = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "last_theft_attempt")
        epoch_right_now = int(time())

        # Theft
        if epoch_right_now < last_theft_epoch + loc.theft_cooldown:  # There is a cooldown
            # Close connection
            sql_connection.close()
            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                                        description=f"<@{ctx.user.id}>, –≤—ã —É–∂–µ –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –æ–≥—Ä–∞–±–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–Ω–µ–µ."
                                                    f" –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ <t:{last_theft_epoch + 10 * 60}:R>",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        else:  # There is no cooldown
            # Check for lockpick
            target = "cookie_counter"
            place = ("–ö–æ—à–µ–ª—ë–∫", "–∫–æ—à–µ–ª—å–∫–µ")
            if lockpick:
                available_lockpicks = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "lockpicks")
                if available_lockpicks > 0:
                    target = "cookie_jar_storage"
                    place = ("–ë–∞–Ω–∫", "–±–∞–Ω–∫–µ.\n–û—Ç–º—ã—á–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–∞")
                    sql_connection.execute(
                        f"UPDATE ECONOMY SET lockpicks = lockpicks - 1 WHERE guild_id = ? AND user_id = ?",
                        (ctx.guild.id, ctx.user.id))
                else:
                    sql_connection.close()
                    # Reply embed
                    reply_embed = discord.Embed(title=f"‚ùå –ù–µ—Ç –æ—Ç–º—ã—á–µ–∫",
                                                description=f"<@{ctx.user.id}>, —É –≤–∞—Å –Ω–µ—Ç –æ—Ç–º—ã—á–µ–∫. "
                                                            f"–ö—É–ø–∏—Ç–µ –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ: `/buy_items`.",
                                                colour=discord.Colour.red())
                    reply_embed.timestamp = loc.moscow_timezone()
                    reply_embed.set_footer(text=f"{ctx.guild.name}",
                                           icon_url=ctx.guild.icon)

                    return await ctx.response.send_message(embed=reply_embed, ephemeral=False)
            # Info retrieval
            target_cookies = dbq.get_user_column_info(sql_connection, ctx.guild.id, member.id, target)
            author_cookies = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "cookie_counter")

            # Get percentages and cookies
            success_chance = randint(0, 100)
            cookies_stolen = loc.steal_cookies(target_cookies)
            cookies_lost_on_failure = loc.steal_cookies_failure(author_cookies)

            # Nothing to steal
            if cookies_stolen == 0:
                # refund lockpick
                if lockpick:
                    sql_connection.execute(
                        f"UPDATE ECONOMY SET lockpicks = lockpicks + 1 WHERE guild_id = ? AND user_id = ?",
                        (ctx.guild.id, ctx.user.id))
                # Close database
                sql_connection.commit()
                sql_connection.close()

                # Reply embed
                reply_embed = discord.Embed(title=f"‚ùå {place[0]} {member.name} –ø—É—Å—Ç",
                                            description=f"<@{member.id}> –Ω–µ –∏–º–µ–µ—Ç ü¶ö –≤ {place[1]}.",
                                            colour=discord.Colour.red())
                reply_embed.timestamp = loc.moscow_timezone()
                reply_embed.set_footer(text=f"{ctx.guild.name}",
                                       icon_url=ctx.guild.icon)

                return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

            # Theft - success
            if success_chance >= 50:
                # Update database
                dbq.claim_peacock_bonus(sql_connection, ctx.guild.id, ctx.user.id, "last_theft_attempt", cookies_stolen,
                                        epoch_right_now)
                sql_connection.execute(
                    f"UPDATE ECONOMY SET last_robbed = {epoch_right_now} WHERE guild_id = ? AND user_id = ?",
                    (ctx.guild.id, member.id))
                sql_connection.execute(
                    f"UPDATE ECONOMY SET {target} = {target} - {cookies_stolen} WHERE guild_id = ? AND user_id = ?",
                    (ctx.guild.id, member.id))
                sql_connection.commit()
                sql_connection.close()

                # Reply embed
                reply_embed = discord.Embed(title=f"üïµÔ∏è –£—Å–ø–µ—à–Ω–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ {member.name}: {place[0]}",
                                            description=f"<@{ctx.user.id}> —É–∫—Ä–∞–ª ü¶ö {cookies_stolen} —É <@{member.id}>.",
                                            colour=discord.Colour.green())
                reply_embed.timestamp = loc.moscow_timezone()
                reply_embed.set_footer(text=f"{ctx.guild.name}",
                                       icon_url=ctx.guild.icon)

                return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

            # Theft - Failure
            elif success_chance in range(20, 50):
                # Close database
                dbq.claim_peacock_bonus(sql_connection, ctx.guild.id, ctx.user.id, "last_theft_attempt", 0,
                                        epoch_right_now)
                sql_connection.close()

                # Reply embed
                reply_embed = discord.Embed(title=f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ {member.name}: {place[0]}",
                                            description=f"<@{ctx.user.id}> –∏—Å–ø—É–≥–∞–ª—Å—è –∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫—Ä–∞–ª —É <@{member.id}>.",
                                            colour=discord.Colour.red())
                reply_embed.timestamp = loc.moscow_timezone()
                reply_embed.set_footer(text=f"{ctx.guild.name}",
                                       icon_url=ctx.guild.icon)

                return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

            # Theft - Critical failure
            else:
                # Lose all cookies if less than
                if author_cookies < cookies_lost_on_failure:
                    cookies_lost_on_failure = author_cookies

                # Update database
                dbq.claim_peacock_bonus(sql_connection, ctx.guild.id, ctx.user.id, "last_theft_attempt",
                                        -cookies_lost_on_failure, epoch_right_now)
                # Close database
                sql_connection.close()

                # Reply embed
                reply_embed = discord.Embed(title=f"‚ùå –ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ {member.name}: {place[0]}",
                                            description=f"–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ —è—Ä–æ—Å—Ç–Ω—ã–º –≤–µ–ª—å—à-–∫–æ—Ä–≥–∏.\n"
                                                        f"<@{ctx.user.id}> –ø–æ—Ç–µ—Ä—è–ª ü¶ö {cookies_lost_on_failure}.",
                                            colour=discord.Colour.red())
                reply_embed.timestamp = loc.moscow_timezone()
                reply_embed.set_footer(text=f"{ctx.guild.name}",
                                       icon_url=ctx.guild.icon)

                return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="deposit", description="–ü–æ–º–µ—Å—Ç–∏—Ç—å ü¶ö –≤ –±–∞–Ω–∫.")
    @app_commands.describe(amount="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ü¶ö, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –≤ –±–∞–Ω–∫.")
    async def save_peacocks_in_bank(self, ctx: discord.Interaction, amount: int):
        # Database connection
        sql_connection = sl.connect('Peacock.db')

        # Information retrieval
        author_bank_cookies = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "cookie_jar_storage")
        author_bank_level = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id,
                                                     "cookie_jar_storage_level")
        author_wallet = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "cookie_counter")

        # Target amount is more than you have in your wallet
        if amount > author_wallet:
            # Close
            sql_connection.close()
            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                                        description=f"<@{ctx.user.id}>, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å ü¶ö {amount} –≤ –±–∞–Ω–∫ - "
                                                    f"—É –≤–∞—Å –≤—Å–µ–≥–æ ü¶ö {author_wallet} –≤ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        # Not enough space in bank
        elif amount > author_bank_level * dbq.bank_capacity_per_lvl(ctx) - author_bank_cookies:
            # Close
            sql_connection.close()
            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –≤ –±–∞–Ω–∫–µ",
                                        description=f"<@{ctx.user.id}>, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å ü¶ö {amount} –≤ –±–∞–Ω–∫ - "
                                                    f"—É –≤–∞—Å –µ—Å—Ç—å –º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è ü¶ö {author_bank_level * dbq.bank_capacity_per_lvl(ctx) - author_bank_cookies} –≤ –≤–∞—à–µ–º –±–∞–Ω–∫–µ.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        # Everything is fine
        else:
            dbq.deposit_peacocks_in_bank(sql_connection, ctx.guild.id, ctx.user.id, amount)
            # Close
            sql_connection.close()
            # Reply embed
            reply_embed = discord.Embed(title=f"üè¶ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–∞",
                                        description=f"<@{ctx.user.id}> –ø–æ–ª–æ–∂–∏–ª ü¶ö {amount} –≤ –±–∞–Ω–∫.",
                                        colour=discord.Colour.green())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="withdraw", description="–ó–∞–±—Ä–∞—Ç—å ü¶ö –∏–∑ –±–∞–Ω–∫–∞.")
    @app_commands.describe(amount="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ü¶ö, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∏–∑ –±–∞–Ω–∫–∞.")
    async def withdraw_peacocks_from_bank(self, ctx: discord.Interaction, amount: int):
        # Database connection
        sql_connection = sl.connect('Peacock.db')

        # Information retrieval
        author_bank_cookies = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "cookie_jar_storage")

        # More demanded than in bank
        if amount > author_bank_cookies:
            # Close
            sql_connection.close()
            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ",
                                        description=f"<@{ctx.user.id}>, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å ü¶ö {amount} - "
                                                    f"—É –≤–∞—Å –≤—Å–µ–≥–æ ü¶ö {author_bank_cookies} –≤ –±–∞–Ω–∫–µ.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        # Everything is fine
        else:
            dbq.deposit_peacocks_in_bank(sql_connection, ctx.guild.id, ctx.user.id, -amount)
            # Close
            sql_connection.close()
            # Reply embed
            reply_embed = discord.Embed(title=f"üè¶ –£—Å–ø–µ—à–Ω–æ–µ –∏–∑—ä—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –±–∞–Ω–∫–∞",
                                        description=f"<@{ctx.user.id}> –∑–∞–±—Ä–∞–ª ü¶ö {amount} –∏–∑ –±–∞–Ω–∫–∞.",
                                        colour=discord.Colour.green())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="work", description="–†–∞–±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å ü¶ö –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è.")
    async def work(self, ctx: discord.Interaction):
        # –°onnecting database
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, ctx.user.id)

        # Check if there is message cooldown
        last_access_epoch = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "last_access")
        fame_lvl = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "fame_lvl")
        epoch_right_now = int(time())

        if epoch_right_now < last_access_epoch + loc.work_bonus_cooldown:
            # Close connection
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –û—à–∏–±–∫–∞",
                                        description=f"–†–∞–±–æ—Ç–∞ –µ—â—ë –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å. "
                                                    f"–í–µ—Ä–Ω–∏—Ç–µ—Å—å <t:{last_access_epoch + loc.work_bonus_cooldown}:R>",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)
        else:
            # Reply embed
            reply_embed = discord.Embed(title=f"üí∞ –†–∞–±–æ—Ç–∞",
                                        colour=discord.Colour.gold())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_thumbnail(url=ctx.user.avatar)
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            # Calculate income
            gained_from_work = randint(250, 500)
            reply_embed.add_field(name=f"–î–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ—Ç—ã:",
                                  value=f"ü¶ö {gained_from_work}",
                                  inline=False)
            amount = gained_from_work
            for i in range(1, 8):
                upgrade = f'upgrade{i}'
                upgrade_level = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, upgrade)
                gain_per_level = loc.gain_from_upgrade_dict[upgrade]
                upgrade_income = round(gain_per_level * upgrade_level * (1+fame_lvl*0.02))

                amount += upgrade_income

                if upgrade_income > 0:
                    reply_embed.add_field(name=f"–î–æ—Ö–æ–¥ –æ—Ç `{loc.upgrade_name_dict[upgrade]}`:",
                                          value=f"ü¶ö {upgrade_income} = {gain_per_level} x "
                                                f"{upgrade_income / gain_per_level}",
                                          inline=False)

            reply_embed.add_field(name="–ò—Ç–æ–≥–æ:",
                                  value=f"–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ü¶ö {amount}.",
                                  inline=False)
            # Update database
            dbq.claim_peacock_bonus(sql_connection, ctx.guild.id, ctx.user.id, "last_access", amount, epoch_right_now)
            sql_connection.close()

            return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="ascend", description="–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ä—å–µ—Ä—ã.")
    @app_commands.describe(level_type="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è",
                           confirmation="–í–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è.")
    @app_commands.choices(level_type=[
        Choice(name='–ë–∏–∑–Ω–µ—Å–º–µ–Ω', value="fame_lvl"),
        # Choice(name='–ü–∏—Ä–∞—Ç', value="infamy_lvl"),
    ])
    async def ascend_level(self, ctx: discord.Interaction, level_type: str, confirmation: bool = False):
        # –°onnecting database
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, ctx.user.id)

        # Database update
        level_name = '–ë–∏–∑–Ω–µ—Å–º–µ–Ω' if level_type == "fame_lvl" else '–ü–∏—Ä–∞—Ç'

        if not confirmation:
            current_career_lvl = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, level_type)
            sql_connection.close()
            # Reply embed
            reply_embed = discord.Embed(title=f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞—Ä—å–µ—Ä—ã: {level_name}",
                                        description=f"–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∫–∞—Ä—å–µ—Ä—ã `{level_name}` –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
                                                    f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É —Å –æ–ø—Ü–∏–µ–π, "
                                                    f"–¥–∞—é—â–µ–π –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è, "
                                                    f"–∞ —Ç–∞–∫–∂–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.",
                                        colour=discord.Colour.dark_green())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            reply_embed.add_field(name=f'*–í–ù–ò–ú–ê–ù–ò–ï*',
                                  value=f'1) –í—Å–µ —É—Ä–æ–≤–Ω–∏ —É–ª—É—á—à–µ–Ω–∏–π –±—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã.\n'
                                        f'2) –ö–æ—à–µ–ª—ë–∫ –±—É–¥–µ—Ç –æ–±–Ω—É–ª—ë–Ω.\n'
                                        f'3) –£—Ä–æ–≤–µ–Ω—å –±–∞–Ω–∫–∞ –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ.\n'
                                        f'4) –†–∞—Å—Ö–æ–¥—É–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –æ–±–Ω—É–ª—è—é—Ç—Å—è.\n'
                                        f'\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, '
                                        f'–∞ —Ç–∞–∫–∂–µ —É–ª—É—á—à–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–Ω–∫.')
            if level_type == "fame_lvl":
                reply_embed.add_field(name=f'–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è `{level_name}`:',
                                      value=f'–£—Ä–æ–≤–µ–Ω—å `{(current_career_lvl + 1) * loc.ascend_legal_path_min_lvls}` '
                                            f'–≤–æ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö —É–ª—É—á—à–µ–Ω–∏–π')
            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)
        else:
            # Check if eligible and nullify upgrades
            for i in range(1, 8):
                upgrade = f'upgrade{i}'
                current_upgrade_lvl = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, upgrade)
                current_career_lvl = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, level_type)
                if current_upgrade_lvl < (current_career_lvl + 1) * loc.ascend_legal_path_min_lvls:
                    # Close
                    sql_connection.close()
                    # Reply embed
                    reply_embed = discord.Embed(title=f"‚ùå –û—à–∏–±–∫–∞",
                                                description=f"<@{ctx.user.id}>, –≤—ã –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç–µ —É—Å–ª–æ–≤–∏—è–º "
                                                            f"–¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è `{level_name}`.",
                                                colour=discord.Colour.red())
                    reply_embed.timestamp = loc.moscow_timezone()
                    reply_embed.set_footer(text=f"{ctx.guild.name}",
                                           icon_url=ctx.guild.icon)
                    return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

            for i in range(1, 8):
                upgrade = f'upgrade{i}'
                sql_connection.execute(
                    f"UPDATE ECONOMY SET {upgrade} = 0 WHERE guild_id = ? AND user_id = ?",
                    (ctx.guild.id, ctx.user.id))

            # Nullify wallet
            sql_connection.execute(
                f"UPDATE ECONOMY SET cookie_counter = 0 WHERE guild_id = ? AND user_id = ?",
                (ctx.guild.id, ctx.user.id))

            # Nullify items
            sql_connection.execute(
                f"UPDATE ECONOMY SET lockpicks = 0 WHERE guild_id = ? AND user_id = ?",
                (ctx.guild.id, ctx.user.id))

            # Level up
            sql_connection.execute(
                f"UPDATE ECONOMY SET {level_type} = {level_type} + 1 WHERE guild_id = ? AND user_id = ?",
                (ctx.guild.id, ctx.user.id))
            sql_connection.commit()
            current_career_lvl = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, level_type)
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞—Ä—å–µ—Ä—ã: {level_name}",
                                        description=f"–£—Ä–æ–≤–µ–Ω—å `{level_name}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{ctx.user.id}> "
                                                    f"–ø–æ–≤—ã—à–∞–µ—Ç—Å—è –¥–æ `{current_career_lvl}`!",
                                        colour=discord.Colour.dark_green())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)
            return await ctx.response.send_message(embed=reply_embed, ephemeral=False)


class peacockAdminEconomyCog(commands.GroupCog, name="adm_economy"):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="edit_peacocks", description="–î–æ–±–∞–≤–∏—Ç—å/–ó–∞–±—Ä–∞—Ç—å ü¶ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    @app_commands.describe(amount="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ü¶ö, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å/–∑–∞–±—Ä–∞—Ç—å.",
                           target="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—å–∏ ü¶ö –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã.")
    @app_commands.choices(where=[
        Choice(name='–ö–æ—à–µ–ª—ë–∫', value="cookie_counter"),
        Choice(name='–ë–∞–Ω–∫', value="cookie_jar_storage"),
    ])
    @app_commands.checks.has_permissions(administrator=True)
    async def edit_peacocks(self, ctx: discord.Interaction, target: discord.Member, where: str, amount: int):
        # Check if user is not a bot
        if target.bot:
            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                                        description=f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        # –°onnecting database
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, target.id)

        # Info retrieval
        target_cookies = dbq.get_user_column_info(sql_connection, ctx.guild.id, target.id, where)
        place = "–ö–æ—à–µ–ª—ë–∫" if where == "cookie_counter" else "–ë–∞–Ω–∫"
        operation = "–°–æ–∑–¥–∞–Ω–∏–µ" if amount >= 0 else "–ò–∑—ä—è—Ç–∏–µ"
        verb = "—Å–æ–∑–¥–∞–Ω–æ" if amount >= 0 else "–∏–∑—ä—è—Ç–æ"
        if target_cookies < abs(amount) and amount < 0:
            amount = target_cookies

        # Database update
        sql_connection.execute(
            f"UPDATE ECONOMY SET {where} = {where} + {amount} WHERE guild_id = ? AND user_id = ?",
            (ctx.guild.id, target.id))
        sql_connection.commit()
        sql_connection.close()

        # Reply embed
        reply_embed = discord.Embed(title=f"{operation} –≤–∞–ª—é—Ç—ã: {place}",
                                    description=f"ü¶ö {abs(amount)} –±—ã–ª–æ {verb} –¥–ª—è <@{target.id}>",
                                    colour=discord.Colour.dark_green())
        reply_embed.timestamp = loc.moscow_timezone()
        reply_embed.set_footer(text=f"{ctx.guild.name}",
                               icon_url=ctx.guild.icon)
        return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="set_career_level", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ä—å–µ—Ä—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    @app_commands.describe(level_value="–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è.",
                           target="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π —É—Ä–æ–≤–µ–Ω—å –±—É–¥–µ–º –∏–∑–º–µ–Ω—ë–Ω.",
                           level_type="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è")
    @app_commands.choices(level_type=[
        Choice(name='–ë–∏–∑–Ω–µ—Å–º–µ–Ω', value="fame_lvl"),
        Choice(name='–ü–∏—Ä–∞—Ç', value="infamy_lvl"),
    ])
    @app_commands.checks.has_permissions(administrator=True)
    async def set_career_level(self, ctx: discord.Interaction, target: discord.Member, level_type: str, level_value: int):
        # Check if user is not a bot
        if target.bot:
            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                                        description=f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        # –°onnecting database
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, target.id)

        # Level can't be negative
        if level_value < 0:
            level_value = 0

        # Database update
        level_name = '–ë–∏–∑–Ω–µ—Å–º–µ–Ω' if level_type == "fame_lvl" else '–ü–∏—Ä–∞—Ç'
        sql_connection.execute(
            f"UPDATE ECONOMY SET {level_type} = {level_value} WHERE guild_id = ? AND user_id = ?",
            (ctx.guild.id, target.id))
        sql_connection.commit()
        sql_connection.close()

        # Reply embed
        reply_embed = discord.Embed(title=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞—Ä—å–µ—Ä—ã: {level_name}",
                                    description=f"–£—Ä–æ–≤–µ–Ω—å `{level_name}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{target.id}> "
                                                f"—Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω `{level_value}`",
                                    colour=discord.Colour.yellow())
        reply_embed.timestamp = loc.moscow_timezone()
        reply_embed.set_footer(text=f"{ctx.guild.name}",
                               icon_url=ctx.guild.icon)
        return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="set_upgrade_level", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    @app_commands.describe(level_value="–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è.",
                           target="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π —É—Ä–æ–≤–µ–Ω—å –±—É–¥–µ–º –∏–∑–º–µ–Ω—ë–Ω.",
                           upgrade_type="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏—è")
    @app_commands.choices(upgrade_type=[
        Choice(name='–ë–∞–Ω–∫', value="cookie_jar_storage_level"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 1 - {loc.upgrade_name_dict["upgrade1"]}', value="upgrade1"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 2 - {loc.upgrade_name_dict["upgrade2"]}', value="upgrade2"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 3 - {loc.upgrade_name_dict["upgrade3"]}', value="upgrade3"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 4 - {loc.upgrade_name_dict["upgrade4"]}', value="upgrade4"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 5 - {loc.upgrade_name_dict["upgrade5"]}', value="upgrade5"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 6 - {loc.upgrade_name_dict["upgrade6"]}', value="upgrade6"),
        Choice(name=f'–£–ª—É—á—à–µ–Ω–∏–µ 7 - {loc.upgrade_name_dict["upgrade7"]}', value="upgrade7"),
    ])
    @app_commands.checks.has_permissions(administrator=True)
    async def set_upgrade_level(self, ctx: discord.Interaction, target: discord.Member, upgrade_type: str, level_value: int):
        # Check if user is not a bot
        if target.bot:
            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                                        description=f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        # –°onnecting database
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, target.id)

        # Level can't be negative
        if level_value < 0:
            level_value = 0

        # Database update
        upgrade_name = loc.upgrade_name_dict[upgrade_type]
        sql_connection.execute(
            f"UPDATE ECONOMY SET {upgrade_type} = {level_value} WHERE guild_id = ? AND user_id = ?",
            (ctx.guild.id, target.id))
        sql_connection.commit()
        sql_connection.close()

        # Reply embed
        reply_embed = discord.Embed(title=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–ª—É—á—à–µ–Ω–∏—è: {upgrade_name}",
                                    description=f"–£—Ä–æ–≤–µ–Ω—å `{upgrade_name}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{target.id}> "
                                                f"—Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω `{level_value}`",
                                    colour=discord.Colour.yellow())
        reply_embed.timestamp = loc.moscow_timezone()
        reply_embed.set_footer(text=f"{ctx.guild.name}",
                               icon_url=ctx.guild.icon)
        return await ctx.response.send_message(embed=reply_embed, ephemeral=False)


class peacockEconomyShop(commands.GroupCog, name="shop"):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="buy_role", description="–ö—É–ø–∏—Ç—å —Ä–æ–ª—å –∑–∞ ü¶ö.")
    @app_commands.describe(role="–†–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∫—É–ø–∏—Ç–µ –∑–∞ ü¶ö")
    @app_commands.choices(role=[
        Choice(name='–ê–±–æ–Ω–µ–º–µ–Ω—Ç –≤ –∞—Ä—Ö–∏–≤ –≥—Ä–µ—Ö–æ–≤', value="role0"),
        Choice(name=f'–ü–∏—Å–∞—Ä—å –≥—Ä–µ—Ö–æ–≤', value="role1"),
        Choice(name=f'–û—Å–º–∞–Ω—Å–∫–∏–π', value="role2"),
        Choice(name=f'–ü—Ä—É—Å—Å–∫–∏–π', value="role3"),
        Choice(name=f'–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π', value="role4"),
        Choice(name=f'–ì–æ—Ä–¥–æ—Å—Ç—å', value="role5"),
        Choice(name=f'Who?', value="role6"),
    ])
    async def buy_role(self, ctx: discord.Interaction, role: str):
        # Database connection
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, ctx.user.id)

        # Info retrieval
        author_cookies = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "cookie_counter")
        choice_role_dict = {
            "role0": loc.archive_role,
            "role1": loc.sin_writer_role,
            "role2": loc.ottoman_role,
            "role3": loc.prussian_role,
            "role4": loc.dutch_role,
            "role5": loc.pride_role,
            "role6": loc.dzen_role,
        }
        # Role ID
        role_id = choice_role_dict[role]
        # Price of role
        price = loc.shop_role_pricelist[role_id]
        # Role object
        role = discord.Object(role_id)
        # Role flag
        already_has_this_role = False
        for member_role in ctx.user.roles:
            if member_role.id == role_id:
                already_has_this_role = True

        # Check if member already has this role
        if already_has_this_role:
            # Close
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –û—à–∏–±–∫–∞",
                                        description=f"<@{ctx.user.id}>, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å.",
                                        colour=discord.Colour.dark_gold())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)
        # Check if enough funds
        elif author_cookies < price:  # Not enough funds
            # Close
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                                        description=f"<@{ctx.user.id}>, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ä–æ–ª—å.\n"
                                                    f"–í–∞—à –∫–æ—à–µ–ª—ë–∫: ü¶ö `{author_cookies}`\n"
                                                    f"–¶–µ–Ω–∞ —Ä–æ–ª–∏: ü¶ö `{price}`.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)
        else:
            # Update
            sql_connection.execute(
                f"UPDATE ECONOMY SET cookie_counter = cookie_counter - {price} WHERE guild_id = ? AND user_id = ?",
                (ctx.guild.id, ctx.user.id))

            # Close
            sql_connection.commit()
            sql_connection.close()

            # Give role
            await ctx.user.add_roles(role, reason="–ö—É–ø–∏–ª —Ä–æ–ª—å –∑–∞ ü¶ö")

            # Reply embed
            reply_embed = discord.Embed(title=f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞",
                                        description=f"<@{ctx.user.id}> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç –Ω–æ–≤—É—é —Ä–æ–ª—å –∑–∞ ü¶ö {price}.",
                                        colour=discord.Colour.green())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

    @app_commands.command(name="remove_role", description="–£–±—Ä–∞—Ç—å —Ä–æ–ª—å. –ë–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ ü¶ö.")
    @app_commands.describe(role="–†–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å")
    @app_commands.choices(role=[
        Choice(name='–ê–±–æ–Ω–µ–º–µ–Ω—Ç –≤ –∞—Ä—Ö–∏–≤ –≥—Ä–µ—Ö–æ–≤', value="role0"),
        Choice(name=f'–ü–∏—Å–∞—Ä—å –≥—Ä–µ—Ö–æ–≤', value="role1"),
        Choice(name=f'–û—Å–º–∞–Ω—Å–∫–∏–π', value="role2"),
        Choice(name=f'–ü—Ä—É—Å—Å–∫–∏–π', value="role3"),
        Choice(name=f'–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π', value="role4"),
        Choice(name=f'–ì–æ—Ä–¥–æ—Å—Ç—å', value="role5"),
        Choice(name=f'Who?', value="role6"),
    ])
    async def remove_role(self, ctx: discord.Interaction, role: str):
        choice_role_dict = {
            "role0": loc.archive_role,
            "role1": loc.sin_writer_role,
            "role2": loc.ottoman_role,
            "role3": loc.prussian_role,
            "role4": loc.dutch_role,
            "role5": loc.pride_role,
            "role6": loc.dzen_role,
        }
        # Role ID
        role_id = choice_role_dict[role]
        # Role object
        role = discord.Object(role_id)

        # Take role
        await ctx.user.remove_roles(role, reason="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–æ–ª—å.")

        # Reply embed
        reply_embed = discord.Embed(title=f"‚úÖ –£—Å–ø–µx",
                                    description=f"–†–æ–ª–∏ <@{ctx.user.id}> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.",
                                    colour=discord.Colour.green())
        reply_embed.timestamp = loc.moscow_timezone()
        reply_embed.set_footer(text=f"{ctx.guild.name}",
                               icon_url=ctx.guild.icon)

        return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

    @app_commands.command(name="timeout", description="–ö—É–ø–∏—Ç—å –º—É—Ç –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞ ü¶ö.")
    @app_commands.describe(timeout_duration="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞", target="–£—á–∞—Å—Ç–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç –º—É—Ç.")
    @app_commands.choices(timeout_duration=[
        Choice(name='–£–±—Ä–∞—Ç—å –º—É—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞', value=0),
        Choice(name='1 –º–∏–Ω—É—Ç–∞', value=1),
        Choice(name=f'10 –º–∏–Ω—É—Ç', value=10),
        Choice(name=f'30 –º–∏–Ω—É—Ç', value=30),
        Choice(name=f'1 —á–∞—Å', value=60),
        Choice(name=f'24 —á–∞—Å–∞', value=60 * 24),
    ])
    async def buy_timeout(self, ctx: discord.Interaction, target: discord.Member, timeout_duration: int):
        bot_top_role = ctx.guild.get_member(self.bot.user.id).top_role
        if target.bot or target.top_role > bot_top_role:  # Target is bot
            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                                        description=f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)

        # Database connection
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, ctx.user.id)

        # Info retrieval
        author_cookies = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "cookie_counter")
        price = 2000 * timeout_duration if timeout_duration != 0 else 10000

        # Check if target is muted and someone wants to mute them again
        if target.is_timed_out() and timeout_duration != 0:
            # Close
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –û—à–∏–±–∫–∞",
                                        description=f"<@{target.id}> —É–∂–µ –∏–º–µ–µ—Ç –º—É—Ç.",
                                        colour=discord.Colour.dark_gold())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)
        elif not target.is_timed_out() and timeout_duration == 0:
            # Close
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –û—à–∏–±–∫–∞",
                                        description=f"<@{target.id}> –Ω–µ –∏–º–µ–µ—Ç –º—É—Ç.",
                                        colour=discord.Colour.dark_gold())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)
        # Check if enough funds
        elif author_cookies < price:  # Not enough funds
            # Close
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                                        description=f"<@{ctx.user.id}>, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –¥–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É.\n"
                                                    f"–í–∞—à –∫–æ—à–µ–ª—ë–∫: ü¶ö `{author_cookies}`\n"
                                                    f"–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏: ü¶ö `{price}`.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)
        else:
            # Update
            sql_connection.execute(
                f"UPDATE ECONOMY SET cookie_counter = cookie_counter - {price} WHERE guild_id = ? AND user_id = ?",
                (ctx.guild.id, ctx.user.id))

            # Close
            sql_connection.commit()
            sql_connection.close()

            # Timeout
            timeout = datetime.datetime.now().astimezone() + datetime.timedelta(minutes=timeout_duration)
            await target.edit(timed_out_until=timeout)

            # Reply embed
            reply_embed = discord.Embed(title=f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –º—É—Ç–∞ –¥–ª—è {target}",
                                        description=f"<@{ctx.user.id}> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç –º—É—Ç –¥–ª—è <@{target.id}> "
                                                    f"–Ω–∞ `{timeout_duration}` –º–∏–Ω—É—Ç –∑–∞ ü¶ö {price}.",
                                        colour=discord.Colour.green()) if timeout_duration != 0 else discord.Embed(
                title=f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Å–Ω—è—Ç–∏—è –º—É—Ç–∞ –¥–ª—è {target}",
                description=f"<@{ctx.user.id}> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç —Å–Ω—è—Ç–∏–µ –º—É—Ç–∞ –¥–ª—è <@{target.id}> –∑–∞ ü¶ö {price}.",
                colour=discord.Colour.green())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=False)

    @app_commands.command(name="buy_items", description="–ö—É–ø–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—É–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∑–∞ ü¶ö.")
    @app_commands.describe(item="–ü—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∫—É–ø–∏—Ç–µ.", quantity="–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∫—É–ø–ª–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
    @app_commands.choices(item=[
        Choice(name=f'{loc.item_name_dict["lockpicks"]} (–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–≥—Ä–∞–±–∏—Ç—å –±–∞–Ω–∫ 1 —Ä–∞–∑.)', value="lockpicks"),
    ])
    async def buy_item(self, ctx: discord.Interaction, item: str, quantity: int):
        # Database connection
        sql_connection = sl.connect('Peacock.db')
        dbq.add_new_user_to_economy_db(sql_connection, ctx.guild.id, ctx.user.id)

        # Info retrieval
        author_cookies = dbq.get_user_column_info(sql_connection, ctx.guild.id, ctx.user.id, "cookie_counter")
        total_price = quantity * loc.item_dict[item]

        # Update database and reply
        if author_cookies >= total_price and quantity>0:
            sql_connection.execute(
                f"UPDATE ECONOMY SET cookie_counter = cookie_counter - {total_price} WHERE guild_id = ? AND user_id = ?",
                (ctx.guild.id, ctx.user.id))
            sql_connection.execute(
                f"UPDATE ECONOMY SET {item} = {item} + {quantity} WHERE guild_id = ? AND user_id = ?",
                (ctx.guild.id, ctx.user.id))
            sql_connection.commit()
            sql_connection.close()

            # Reply embed
            reply_embed = discord.Embed(title=f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                                        description=f"<@{ctx.user.id}> —É—Å–ø–µ—à–Ω–æ –ø–æ–∫—É–ø–∞–µ—Ç `{loc.item_name_dict[item]}` "
                                                    f"–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç—É–∫ –∑–∞ ü¶ö {total_price}.",
                                        colour=discord.Colour.green())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=False)
        else:
            sql_connection.close()
            # Reply embed
            reply_embed = discord.Embed(title=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                                        description=f"<@{ctx.user.id}>, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å "
                                                    f"{quantity} —à—Ç—É–∫ `{loc.item_name_dict[item]}`.\n"
                                                    f"–í–∞—à –∫–æ—à–µ–ª—ë–∫: ü¶ö {author_cookies}\n"
                                                    f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: ü¶ö {total_price}.",
                                        colour=discord.Colour.red())
            reply_embed.timestamp = loc.moscow_timezone()
            reply_embed.set_footer(text=f"{ctx.guild.name}",
                                   icon_url=ctx.guild.icon)

            return await ctx.response.send_message(embed=reply_embed, ephemeral=True)


async def setup(bot):
    sql_connection = sl.connect('Peacock.db')
    sql_connection.execute(
        f"CREATE TABLE IF NOT EXISTS ECONOMY (guild_id int, user_id int, "
        f"cookie_counter int, cookie_jar_storage int, cookie_jar_storage_level int, "
        f"upgrade1 int, upgrade2 int, upgrade3 int, upgrade4 int, upgrade5 int, upgrade6 int, upgrade7 int, "
        f"last_access int, daily_bonus int, weekly_bonus int, monthly_bonus int, message_cooldown int, "
        f"last_theft_attempt int, infamy_lvl int, fame_lvl int, last_robbed int, lockpicks int, "
        f"primary key (guild_id, user_id))")
    sql_connection.commit()
    sql_connection.close()
    await bot.add_cog(peacockEconomyCog(bot))
    await bot.add_cog(peacockAdminEconomyCog(bot))
    await bot.add_cog(peacockEconomyShop(bot))
